---
# Fail the play if running on an unsupported platform
- name: Assert platform is supported
  tags: gitolite
  assert:
    that:
      - ansible_os_family in ['Debian', 'RedHat']


# manage installation of required packages
- include_vars: "{{ ansible_os_family }}.yml"
  tags: gitolite

# manage SELinux
- include: selinux.yml
  tags: gitolite

- name: Install required packages
  tags: gitolite
  action: "{{ ansible_pkg_mgr }} state=installed name={{ item }}"
  with_items: gitolite_package_list


# create gitolite user and group
#   group
- name: create gitolite group
  tags: gitolite
  group:
    state=present
    name={{ gitolite_user_group }}
    system=yes
#   user
- name: create gitolite user
  tags: gitolite
  user:
    state=present
    name={{ gitolite_user_name }}
    group={{ gitolite_user_group }}
    home={{ gitolite_user_home }}
    createhome=yes
    generate_ssh_key=yes
    ssh_key_bits=4096
    ssh_key_type=rsa
    ssh_key_comment="Gitolite Service"


# manage gitolite users' ssh configuration
- name: install gitolite ssh configuration
  tags: gitolite
  copy:
    src=ssh_config
    dest={{ gitolite_user_home }}/.ssh/config
    mode=0600
    owner={{ gitolite_user_name }}
    group={{ gitolite_user_group }}


# setup gitolite
- name: install directories for gitolite
  tags: gitolite
  file:
    state=directory
    dest={{ item }}
    mode=0755
    owner=root
    group=root
  with_items:
    - /usr/local/lib/gitolite
    - /usr/local/src/gitolite

- name: git clone gitolite
  tags: gitolite
  git:
    force=yes
    repo={{ gitolite_url }}
    version={{ gitolite_tag }}
    remote=github
    dest=/usr/local/src/gitolite

- name: install gitolite
  tags: gitolite
  action: command /usr/local/src/gitolite/install -to /usr/local/lib/gitolite
    creates=/usr/local/lib/gitolite/gitolite

- name: install gitolite configuration
  tags: gitolitecount
  template:
    src=gitolite.rc.j2
    dest={{ gitolite_user_home }}/.gitolite.rc
    mode=0640
    owner={{ gitolite_user_name }}
    group={{ gitolite_user_group }}

- name: install gitolite shell user list
  tags: gitolitecount
  template:
    src=gitolite.rc.shell_user.j2
    dest={{ gitolite_user_home }}/.gitolite.rc.shell_user
    mode=0640
    owner={{ gitolite_user_name }}
    group={{ gitolite_user_group }}
  when: gitolite_gitoliterc_shell_user_list|count != 0

- name: initialize gitolite
  tags: gitolite
  sudo: yes
  sudo_user: "{{ gitolite_user_name }}"
  action: command /usr/local/lib/gitolite/gitolite setup -pk {{ gitolite_user_home }}/.ssh/id_rsa.pub
    chdir={{ gitolite_user_home }}
    creates={{ gitolite_user_home }}/.gitolite


#- include: admin.yml
#  tags: [gitolite_admin, gitolite]
